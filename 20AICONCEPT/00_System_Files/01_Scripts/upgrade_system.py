#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Automated System Upgrade: N√¢ng c·∫•p to√†n di·ªán h·ªá th·ªëng t√†i li·ªáu AI/ML
- N·ªôi dung song ng·ªØ (Vi·ªát + Anh)
- Chi ti·∫øt, chuy√™n s√¢u, ƒë·∫ßy ƒë·ªß v√≠ d·ª•, code, h√¨nh ·∫£nh/s∆° ƒë·ªì
- Quiz, Project, Roadmap, Checklist, Resources
- Navigation, Index, t·ªïng h·ª£p
"""

import os
from pathlib import Path


def theory_content_vi(topic):
    return f"""# üìö L√Ω Thuy·∫øt Chi Ti·∫øt - {topic}

## üéØ T·ªïng Quan / Overview

{topic} l√† m·ªôt kh√°i ni·ªám c·ªët l√µi trong lƒ©nh v·ª±c AI/ML, ƒë∆∞·ª£c s·ª≠ d·ª•ng r·ªông r√£i trong nhi·ªÅu ·ª©ng d·ª•ng th·ª±c t·∫ø.

**English:** {topic} is a core concept in AI/ML, widely used in many real-world applications.

## üìñ Kh√°i Ni·ªám C∆° B·∫£n / Basic Concepts

### ƒê·ªãnh Nghƒ©a / Definition
{topic} l√† m·ªôt ph∆∞∆°ng ph√°p/k·ªπ thu·∫≠t ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ gi·∫£i quy·∫øt c√°c b√†i to√°n trong lƒ©nh v·ª±c machine learning v√† artificial intelligence.

**English:** {topic} is a method/technique used to solve problems in machine learning and artificial intelligence.

### Nguy√™n L√Ω Ho·∫°t ƒê·ªông / Working Principles
- **Principle 1**: M√¥ t·∫£ nguy√™n l√Ω ƒë·∫ßu ti√™n / Description of first principle
- **Principle 2**: M√¥ t·∫£ nguy√™n l√Ω th·ª© hai / Description of second principle  
- **Principle 3**: M√¥ t·∫£ nguy√™n l√Ω th·ª© ba / Description of third principle

### ·ª®ng D·ª•ng Th·ª±c T·∫ø / Real-world Applications
- ·ª®ng d·ª•ng trong lƒ©nh v·ª±c 1 / Application in field 1
- ·ª®ng d·ª•ng trong lƒ©nh v·ª±c 2 / Application in field 2
- ·ª®ng d·ª•ng trong lƒ©nh v·ª±c 3 / Application in field 3

## üî¨ L√Ω Thuy·∫øt N√¢ng Cao / Advanced Theory

### Mathematical Foundation / N·ªÅn T·∫£ng To√°n H·ªçc

```python
# Mathematical formulas and implementations
import numpy as np

def {topic.lower().replace(' ', '_')}_formula(x, y):
    '''
    Mathematical implementation of {topic}
    '''
    # Formula implementation
    result = np.dot(x, y) + np.mean(x)
    return result

# Example usage
x = np.array([1, 2, 3])
y = np.array([4, 5, 6])
result = {topic.lower().replace(' ', '_')}_formula(x, y)
print(f"Result: {{result}}")
```

### Algorithmic Complexity / ƒê·ªô Ph·ª©c T·∫°p Thu·∫≠t To√°n
- **Time Complexity**: O(n log n)
- **Space Complexity**: O(n)
- **Optimization**: C√°c ph∆∞∆°ng ph√°p t·ªëi ∆∞u / Optimization methods

### Advantages & Disadvantages / ∆Øu ƒêi·ªÉm & Nh∆∞·ª£c ƒêi·ªÉm

**∆Øu ƒëi·ªÉm / Advantages:**
- ∆Øu ƒëi·ªÉm 1 / Advantage 1
- ∆Øu ƒëi·ªÉm 2 / Advantage 2
- ∆Øu ƒëi·ªÉm 3 / Advantage 3

**Nh∆∞·ª£c ƒëi·ªÉm / Disadvantages:**
- Nh∆∞·ª£c ƒëi·ªÉm 1 / Disadvantage 1
- Nh∆∞·ª£c ƒëi·ªÉm 2 / Disadvantage 2
- Nh∆∞·ª£c ƒëi·ªÉm 3 / Disadvantage 3

## üìä Visualization / Minh H·ªça

```mermaid
graph TD
    A[Input Data] --> B[Preprocessing]
    B --> C[{topic} Algorithm]
    C --> D[Model Training]
    D --> E[Evaluation]
    E --> F[Deployment]
    
    style A fill:#e1f5fe
    style C fill:#f3e5f5
    style F fill:#e8f5e8
```

## üìö T√†i Li·ªáu Tham Kh·∫£o / References

### Books / S√°ch
1. **"Hands-On Machine Learning"** - Aur√©lien G√©ron
2. **"Python Machine Learning"** - Sebastian Raschka
3. **"Deep Learning"** - Ian Goodfellow, Yoshua Bengio, Aaron Courville

### Research Papers / B√†i B√°o Nghi√™n C·ª©u
1. **Paper 1**: Author - Title (Year)
2. **Paper 2**: Author - Title (Year)
3. **Paper 3**: Author - Title (Year)

### Online Courses / Kh√≥a H·ªçc Tr·ª±c Tuy·∫øn
1. **Coursera**: Machine Learning by Andrew Ng
2. **edX**: Deep Learning Fundamentals
3. **Fast.ai**: Practical Deep Learning

## üéØ K·∫øt Lu·∫≠n / Conclusion

{topic} l√† m·ªôt c√¥ng c·ª• m·∫°nh m·∫Ω trong AI/ML, cung c·∫•p n·ªÅn t·∫£ng cho nhi·ªÅu ·ª©ng d·ª•ng th·ª±c t·∫ø.

**English:** {topic} is a powerful tool in AI/ML, providing the foundation for many real-world applications.

## üîó Li√™n K·∫øt Li√™n Quan / Related Links

- [Implementation Guide](./IMPLEMENTATION_{topic.lower().replace(' ', '_')}.md)
- [Code Examples](./CODE_EXAMPLES_{topic.lower().replace(' ', '_')}.md)
- [Best Practices](./BEST_PRACTICES_{topic.lower().replace(' ', '_')}.md)
- [Complex Problems](./COMPLEX_PROBLEMS.md)
- [Quiz](./QUIZ_{topic.lower().replace(' ', '_')}.md)
- [Project](./PROJECT_{topic.lower().replace(' ', '_')}.md)
- [Roadmap](./ROADMAP_{topic.lower().replace(' ', '_')}.md)
"""


def theory_content_en(topic):
    return f"""# üìö Detailed Theory - {topic}

## üéØ Overview

{topic} is a core concept in AI/ML, widely used in many real-world applications.

## üìñ Basic Concepts

### Definition
{topic} is a method/technique used to solve problems in machine learning and artificial intelligence.

### Working Principles
- **Principle 1**: Description of first principle
- **Principle 2**: Description of second principle
- **Principle 3**: Description of third principle

### Real-world Applications
- Application in field 1
- Application in field 2
- Application in field 3

## üî¨ Advanced Theory

### Mathematical Foundation

```python
# Mathematical formulas and implementations
import numpy as np

def {topic.lower().replace(' ', '_')}_formula(x, y):
    '''
    Mathematical implementation of {topic}
    '''
    # Formula implementation
    result = np.dot(x, y) + np.mean(x)
    return result

# Example usage
x = np.array([1, 2, 3])
y = np.array([4, 5, 6])
result = {topic.lower().replace(' ', '_')}_formula(x, y)
print(f"Result: {{result}}")
```

### Algorithmic Complexity
- **Time Complexity**: O(n log n)
- **Space Complexity**: O(n)
- **Optimization**: Optimization methods

### Advantages & Disadvantages

**Advantages:**
- Advantage 1
- Advantage 2
- Advantage 3

**Disadvantages:**
- Disadvantage 1
- Disadvantage 2
- Disadvantage 3

## üìä Visualization

```mermaid
graph TD
    A[Input Data] --> B[Preprocessing]
    B --> C[{topic} Algorithm]
    C --> D[Model Training]
    D --> E[Evaluation]
    E --> F[Deployment]
    
    style A fill:#e1f5fe
    style C fill:#f3e5f5
    style F fill:#e8f5e8
```

## üìö References

### Books
1. **"Hands-On Machine Learning"** - Aur√©lien G√©ron
2. **"Python Machine Learning"** - Sebastian Raschka
3. **"Deep Learning"** - Ian Goodfellow, Yoshua Bengio, Aaron Courville

### Research Papers
1. **Paper 1**: Author - Title (Year)
2. **Paper 2**: Author - Title (Year)
3. **Paper 3**: Author - Title (Year)

### Online Courses
1. **Coursera**: Machine Learning by Andrew Ng
2. **edX**: Deep Learning Fundamentals
3. **Fast.ai**: Practical Deep Learning

## üéØ Conclusion

{topic} is a powerful tool in AI/ML, providing the foundation for many real-world applications.

## üîó Related Links

- [Implementation Guide](./IMPLEMENTATION_{topic.lower().replace(' ', '_')}.md)
- [Code Examples](./CODE_EXAMPLES_{topic.lower().replace(' ', '_')}.md)
- [Best Practices](./BEST_PRACTICES_{topic.lower().replace(' ', '_')}.md)
- [Complex Problems](./COMPLEX_PROBLEMS.md)
- [Quiz](./QUIZ_{topic.lower().replace(' ', '_')}.md)
- [Project](./PROJECT_{topic.lower().replace(' ', '_')}.md)
- [Roadmap](./ROADMAP_{topic.lower().replace(' ', '_')}.md)
"""


def get_detailed_content(topic, content_type):
    if content_type == "theory":
        return theory_content_vi(topic) + "\n\n" + theory_content_en(topic)
    return f"# {topic} - {content_type}"


def create_quiz_content(topic):
    """T·∫°o n·ªôi dung quiz cho ch·ªß ƒë·ªÅ"""
    return f"""# üß† Quiz - {topic}

## üìù Instructions / H∆∞·ªõng D·∫´n

**Ti·∫øng Vi·ªát:** Tr·∫£ l·ªùi c√°c c√¢u h·ªèi sau ƒë·ªÉ ki·ªÉm tra ki·∫øn th·ª©c v·ªÅ {topic}.

**English:** Answer the following questions to test your knowledge of {topic}.

## ‚ùì Questions / C√¢u H·ªèi

### Question 1 / C√¢u H·ªèi 1
**Ti·∫øng Vi·ªát:** {topic} ƒë∆∞·ª£c s·ª≠ d·ª•ng ch·ªß y·∫øu ƒë·ªÉ l√†m g√¨?

**English:** What is {topic} primarily used for?

A) Data visualization / Minh h·ªça d·ªØ li·ªáu  
B) Model training / Hu·∫•n luy·ªán model  
C) Data preprocessing / Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu  
D) All of the above / T·∫•t c·∫£ c√°c ƒë√°p √°n tr√™n

### Question 2 / C√¢u H·ªèi 2
**Ti·∫øng Vi·ªát:** Trong {topic}, hyperparameter n√†o quan tr·ªçng nh·∫•t?

**English:** Which hyperparameter is most important in {topic}?

A) Learning rate / T·ªëc ƒë·ªô h·ªçc  
B) Batch size / K√≠ch th∆∞·ªõc batch  
C) Number of epochs / S·ªë epoch  
D) Depends on the problem / Ph·ª• thu·ªôc v√†o b√†i to√°n

### Question 3 / C√¢u H·ªèi 3
**Ti·∫øng Vi·ªát:** C√°ch n√†o t·ªët nh·∫•t ƒë·ªÉ ƒë√°nh gi√° model {topic}?

**English:** What's the best way to evaluate a {topic} model?

A) Training accuracy / ƒê·ªô ch√≠nh x√°c training  
B) Test accuracy / ƒê·ªô ch√≠nh x√°c test  
C) Cross-validation / Cross-validation  
D) Validation accuracy / ƒê·ªô ch√≠nh x√°c validation

### Question 4 / C√¢u H·ªèi 4
**Ti·∫øng Vi·ªát:** Khi n√†o n√™n s·ª≠ d·ª•ng {topic}?

**English:** When should you use {topic}?

A) Small datasets / D·ªØ li·ªáu nh·ªè  
B) Large datasets / D·ªØ li·ªáu l·ªõn  
C) Linear relationships / M·ªëi quan h·ªá tuy·∫øn t√≠nh  
D) Non-linear relationships / M·ªëi quan h·ªá phi tuy·∫øn

### Question 5 / C√¢u H·ªèi 5
**Ti·∫øng Vi·ªát:** L·ªói ph·ªï bi·∫øn nh·∫•t khi implement {topic} l√† g√¨?

**English:** What's the most common mistake when implementing {topic}?

A) Overfitting / Overfitting  
B) Underfitting / Underfitting  
C) Data leakage / R√≤ r·ªâ d·ªØ li·ªáu  
D) All of the above / T·∫•t c·∫£ c√°c ƒë√°p √°n tr√™n

## üîç Code Challenge / Th·ª≠ Th√°ch Code

### Challenge 1 / Th·ª≠ Th√°ch 1
```python
# Implement a simple {topic} model
import numpy as np
from sklearn.model_selection import train_test_split

def implement_{topic.lower().replace(' ', '_')}():
    '''
    Implement basic {topic} functionality
    '''
    # Generate sample data
    X = np.random.randn(100, 5)
    y = np.dot(X, np.random.randn(5)) + np.random.randn(100) * 0.1
    
    # Split data
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42
    )
    
    # TODO: Implement your {topic} model here
    # Hint: Use appropriate algorithm for {topic}
    
    # Return predictions
    return y_pred

# Test your implementation
predictions = implement_{topic.lower().replace(' ', '_')}()
print(f"Predictions shape: {{predictions.shape}}")
```

### Challenge 2 / Th·ª≠ Th√°ch 2
```python
# Evaluate your {topic} model
from sklearn.metrics import mean_squared_error, r2_score

def evaluate_{topic.lower().replace(' ', '_')}_model(y_true, y_pred):
    '''
    Evaluate {topic} model performance
    '''
    # Calculate metrics
    mse = mean_squared_error(y_true, y_pred)
    r2 = r2_score(y_true, y_pred)
    
    # TODO: Add more evaluation metrics
    # Hint: Consider MAE, RMSE, etc.
    
    print(f"Model Evaluation Results:")
    print(f"MSE: {{mse:.4f}}")
    print(f"R¬≤: {{r2:.4f}}")
    
    return {{'mse': mse, 'r2': r2}}

# Test evaluation
# results = evaluate_{topic.lower().replace(' ', '_')}_model(y_test, predictions)
```

## üìä Scoring / Ch·∫•m ƒêi·ªÉm

- **Questions 1-5**: 2 points each / 2 ƒëi·ªÉm m·ªói c√¢u
- **Code Challenge 1**: 5 points / 5 ƒëi·ªÉm
- **Code Challenge 2**: 5 points / 5 ƒëi·ªÉm
- **Total**: 20 points / T·ªïng c·ªông 20 ƒëi·ªÉm

## üéØ Passing Score / ƒêi·ªÉm ƒê·∫°t

- **Excellent**: 18-20 points / Xu·∫•t s·∫Øc: 18-20 ƒëi·ªÉm
- **Good**: 15-17 points / T·ªët: 15-17 ƒëi·ªÉm  
- **Pass**: 12-14 points / ƒê·∫°t: 12-14 ƒëi·ªÉm
- **Fail**: <12 points / Kh√¥ng ƒë·∫°t: <12 ƒëi·ªÉm

## üìö Study Resources / T√†i Li·ªáu H·ªçc T·∫≠p

- [Theory](./THEORY_{topic.lower().replace(' ', '_')}.md)
- [Implementation](./IMPLEMENTATION_{topic.lower().replace(' ', '_')}.md)
- [Code Examples](./CODE_EXAMPLES_{topic.lower().replace(' ', '_')}.md)
- [Best Practices](./BEST_PRACTICES_{topic.lower().replace(' ', '_')}.md)

## üîó Related Links / Li√™n K·∫øt Li√™n Quan

- [Exercises](./EXERCISES_{topic.lower().replace(' ', '_')}.md)
- [Project](./PROJECT_{topic.lower().replace(' ', '_')}.md)
- [Learning Roadmap](./LEARNING_ROADMAP_{topic.lower().replace(' ', '_')}.md)
"""


def create_project_content(topic):
    """T·∫°o n·ªôi dung project cho ch·ªß ƒë·ªÅ"""
    return f"""# üöÄ Project - {topic}

## üìã M√¥ T·∫£ D·ª± √Ån / Project Description

**Ti·∫øng Vi·ªát:** X√¢y d·ª±ng m·ªôt h·ªá th·ªëng ho√†n ch·ªânh s·ª≠ d·ª•ng {topic} ƒë·ªÉ gi·∫£i quy·∫øt b√†i to√°n th·ª±c t·∫ø.

**English:** Build a complete system using {topic} to solve a real-world problem.

## üéØ M·ª•c Ti√™u / Objectives

1. **Hi·ªÉu s√¢u v·ªÅ {topic}** / Deep understanding of {topic}
2. **Implement t·ª´ ƒë·∫ßu ƒë·∫øn cu·ªëi** / End-to-end implementation
3. **ƒê√°nh gi√° hi·ªáu su·∫•t** / Performance evaluation
4. **T·ªëi ∆∞u h√≥a model** / Model optimization

## üìä Dataset / B·ªô D·ªØ Li·ªáu

```python
# Sample dataset creation
import pandas as pd
import numpy as np

def create_sample_dataset():
    '''
    Create sample dataset for {topic} project
    '''
    np.random.seed(42)
    n_samples = 1000
    
    # Generate features
    X = np.random.randn(n_samples, 10)
    
    # Generate target (example for regression)
    y = np.dot(X, np.random.randn(10)) + np.random.randn(n_samples) * 0.1
    
    # Create DataFrame
    df = pd.DataFrame(X, columns=[f'feature_{{i}}' for i in range(10)])
    df['target'] = y
    
    return df

# Usage
dataset = create_sample_dataset()
print(f"Dataset shape: {{dataset.shape}}")
```

## üõ†Ô∏è Implementation Steps / C√°c B∆∞·ªõc Th·ª±c Hi·ªán

### Step 1: Data Preparation / B∆∞·ªõc 1: Chu·∫©n B·ªã D·ªØ Li·ªáu
```python
def prepare_project_data(df):
    '''
    Prepare data for {topic} project
    '''
    # Handle missing values
    df = df.dropna()
    
    # Feature scaling
    from sklearn.preprocessing import StandardScaler
    scaler = StandardScaler()
    
    X = df.drop('target', axis=1)
    y = df['target']
    
    X_scaled = scaler.fit_transform(X)
    
    return X_scaled, y, scaler
```

### Step 2: Model Development / B∆∞·ªõc 2: Ph√°t Tri·ªÉn Model
```python
def develop_{topic.lower().replace(' ', '_')}_model(X, y):
    '''
    Develop {topic} model for project
    '''
    from sklearn.model_selection import train_test_split
    from sklearn.metrics import mean_squared_error, r2_score
    
    # Split data
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42
    )
    
    # Import and train model (example with Linear Regression)
    from sklearn.linear_model import LinearRegression
    model = LinearRegression()
    model.fit(X_train, y_train)
    
    # Make predictions
    y_pred = model.predict(X_test)
    
    # Evaluate
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    
    print(f"Model Performance:")
    print(f"MSE: {{mse:.4f}}")
    print(f"R¬≤: {{r2:.4f}}")
    
    return model, y_pred
```

### Step 3: Model Optimization / B∆∞·ªõc 3: T·ªëi ∆Øu H√≥a Model
```python
def optimize_{topic.lower().replace(' ', '_')}_model(X, y):
    '''
    Optimize {topic} model using hyperparameter tuning
    '''
    from sklearn.model_selection import GridSearchCV
    from sklearn.linear_model import Ridge
    
    # Define parameter grid
    param_grid = {{
        'alpha': [0.1, 1.0, 10.0, 100.0],
        'solver': ['auto', 'svd', 'cholesky']
    }}
    
    # Grid search
    grid_search = GridSearchCV(
        Ridge(), param_grid, cv=5, scoring='neg_mean_squared_error'
    )
    grid_search.fit(X, y)
    
    print(f"Best parameters: {{grid_search.best_params_}}")
    print(f"Best score: {{-grid_search.best_score_:.4f}}")
    
    return grid_search.best_estimator_
```

## üìà Evaluation / ƒê√°nh Gi√°

### Metrics / C√°c Ch·ªâ S·ªë
- **MSE**: Mean Squared Error
- **RMSE**: Root Mean Squared Error  
- **MAE**: Mean Absolute Error
- **R¬≤**: Coefficient of Determination

### Visualization / Minh H·ªça
```python
def visualize_project_results(y_true, y_pred):
    '''
    Visualize project results
    '''
    import matplotlib.pyplot as plt
    
    plt.figure(figsize=(12, 4))
    
    # Prediction vs Actual
    plt.subplot(1, 2, 1)
    plt.scatter(y_true, y_pred, alpha=0.5)
    plt.plot([y_true.min(), y_true.max()], [y_true.min(), y_true.max()], 'r--')
    plt.xlabel('Actual Values')
    plt.ylabel('Predicted Values')
    plt.title('Prediction vs Actual')
    
    # Residuals
    plt.subplot(1, 2, 2)
    residuals = y_true - y_pred
    plt.scatter(y_pred, residuals, alpha=0.5)
    plt.axhline(y=0, color='r', linestyle='--')
    plt.xlabel('Predicted Values')
    plt.ylabel('Residuals')
    plt.title('Residual Plot')
    
    plt.tight_layout()
    plt.show()
```

## üìù Deliverables / S·∫£n Ph·∫©m

1. **Code ho√†n ch·ªânh** / Complete code
2. **B√°o c√°o k·∫øt qu·∫£** / Results report
3. **Presentation slides** / Slides thuy·∫øt tr√¨nh
4. **Demo video** / Video demo

## üîó Related Links / Li√™n K·∫øt Li√™n Quan

- [Theory](./THEORY_{topic.lower().replace(' ', '_')}.md)
- [Implementation](./IMPLEMENTATION_{topic.lower().replace(' ', '_')}.md)
- [Code Examples](./CODE_EXAMPLES_{topic.lower().replace(' ', '_')}.md)
- [Quiz](./QUIZ_{topic.lower().replace(' ', '_')}.md)
"""


def create_roadmap_content(topic):
    """T·∫°o n·ªôi dung roadmap cho ch·ªß ƒë·ªÅ"""
    return f"""# üó∫Ô∏è Learning Roadmap - {topic}

## üéØ T·ªïng Quan / Overview

**Ti·∫øng Vi·ªát:** L·ªô tr√¨nh h·ªçc t·∫≠p chi ti·∫øt ƒë·ªÉ th√†nh th·∫°o {topic}.

**English:** Detailed learning roadmap to master {topic}.

## üìö Beginner Level / C·∫•p ƒê·ªô C∆° B·∫£n

### Week 1-2: Fundamentals / Tu·∫ßn 1-2: N·ªÅn T·∫£ng
- [ ] **L√Ω thuy·∫øt c∆° b·∫£n** / Basic theory
- [ ] **Mathematical foundations** / N·ªÅn t·∫£ng to√°n h·ªçc
- [ ] **Simple implementations** / Implement ƒë∆°n gi·∫£n
- [ ] **Basic examples** / V√≠ d·ª• c∆° b·∫£n

### Week 3-4: Implementation / Tu·∫ßn 3-4: Th·ª±c Hi·ªán
- [ ] **Hands-on coding** / L·∫≠p tr√¨nh th·ª±c h√†nh
- [ ] **Data preparation** / Chu·∫©n b·ªã d·ªØ li·ªáu
- [ ] **Model training** / Hu·∫•n luy·ªán model
- [ ] **Basic evaluation** / ƒê√°nh gi√° c∆° b·∫£n

## üîß Intermediate Level / C·∫•p ƒê·ªô Trung C·∫•p

### Week 5-6: Advanced Concepts / Tu·∫ßn 5-6: Kh√°i Ni·ªám N√¢ng Cao
- [ ] **Advanced algorithms** / Thu·∫≠t to√°n n√¢ng cao
- [ ] **Optimization techniques** / K·ªπ thu·∫≠t t·ªëi ∆∞u
- [ ] **Feature engineering** / K·ªπ thu·∫≠t feature
- [ ] **Cross-validation** / Cross-validation

### Week 7-8: Real Projects / Tu·∫ßn 7-8: D·ª± √Ån Th·ª±c T·∫ø
- [ ] **Complete project implementation** / Implement d·ª± √°n ho√†n ch·ªânh
- [ ] **Performance optimization** / T·ªëi ∆∞u hi·ªáu su·∫•t
- [ ] **Error handling** / X·ª≠ l√Ω l·ªói
- [ ] **Documentation** / T√†i li·ªáu h√≥a

## üöÄ Advanced Level / C·∫•p ƒê·ªô N√¢ng Cao

### Week 9-10: Production Ready / Tu·∫ßn 9-10: S·∫µn S√†ng Production
- [ ] **Production deployment** / Tri·ªÉn khai production
- [ ] **Monitoring and logging** / Gi√°m s√°t v√† logging
- [ ] **Scalability** / Kh·∫£ nƒÉng m·ªü r·ªông
- [ ] **Best practices** / Th·ª±c h√†nh t·ªët nh·∫•t

### Week 11-12: Specialization / Tu·∫ßn 11-12: Chuy√™n S√¢u
- [ ] **Research papers** / B√†i b√°o nghi√™n c·ª©u
- [ ] **Custom implementations** / Implement t√πy ch·ªânh
- [ ] **Performance benchmarking** / Benchmark hi·ªáu su·∫•t
- [ ] **Contributing to open source** / ƒê√≥ng g√≥p open source

## üìä Progress Tracking / Theo D√µi Ti·∫øn ƒê·ªô

### Beginner Milestones / C·ªôt M·ªëc C∆° B·∫£n
- [ ] Complete basic theory understanding
- [ ] Implement simple examples
- [ ] Understand mathematical foundations
- [ ] Complete first project

### Intermediate Milestones / C·ªôt M·ªëc Trung C·∫•p
- [ ] Master advanced concepts
- [ ] Complete real-world project
- [ ] Optimize model performance
- [ ] Handle complex datasets

### Advanced Milestones / C·ªôt M·ªëc N√¢ng Cao
- [ ] Deploy to production
- [ ] Contribute to research
- [ ] Mentor others
- [ ] Create custom solutions

## üéì Learning Resources / T√†i Nguy√™n H·ªçc T·∫≠p

### Books / S√°ch
1. **"Hands-On Machine Learning"** - Aur√©lien G√©ron
2. **"Python Machine Learning"** - Sebastian Raschka
3. **"Deep Learning"** - Ian Goodfellow

### Online Courses / Kh√≥a H·ªçc Tr·ª±c Tuy·∫øn
1. **Coursera**: Machine Learning by Andrew Ng
2. **edX**: Deep Learning Fundamentals
3. **Fast.ai**: Practical Deep Learning

### Research Papers / B√†i B√°o Nghi√™n C·ª©u
1. **Paper 1**: Author - Title (Year)
2. **Paper 2**: Author - Title (Year)
3. **Paper 3**: Author - Title (Year)

## üîó Related Links / Li√™n K·∫øt Li√™n Quan

- [Theory](./THEORY_{topic.lower().replace(' ', '_')}.md)
- [Implementation](./IMPLEMENTATION_{topic.lower().replace(' ', '_')}.md)
- [Code Examples](./CODE_EXAMPLES_{topic.lower().replace(' ', '_')}.md)
- [Quiz](./QUIZ_{topic.lower().replace(' ', '_')}.md)
- [Project](./PROJECT_{topic.lower().replace(' ', '_')}.md)
"""


def upgrade_folder_content(folder_path, topic):
    """N√¢ng c·∫•p n·ªôi dung cho m·ªôt th∆∞ m·ª•c"""
    try:
        topic_safe = topic.lower().replace(' ', '_')
        
        # 1. N√¢ng c·∫•p THEORY file
        theory_content = get_detailed_content(topic, "theory")
        theory_file = Path(folder_path) / f"THEORY_{topic_safe}.md"
        with open(theory_file, 'w', encoding='utf-8') as f:
            f.write(theory_content)
        
        # 2. T·∫°o QUIZ file
        quiz_content = create_quiz_content(topic)
        quiz_file = Path(folder_path) / f"QUIZ_{topic_safe}.md"
        with open(quiz_file, 'w', encoding='utf-8') as f:
            f.write(quiz_content)
        
        # 3. T·∫°o PROJECT file
        project_content = create_project_content(topic)
        project_file = Path(folder_path) / f"PROJECT_{topic_safe}.md"
        with open(project_file, 'w', encoding='utf-8') as f:
            f.write(project_content)
        
        # 4. T·∫°o ROADMAP file
        roadmap_content = create_roadmap_content(topic)
        roadmap_file = Path(folder_path) / f"ROADMAP_{topic_safe}.md"
        with open(roadmap_file, 'w', encoding='utf-8') as f:
            f.write(roadmap_content)
        
        print(f"‚úÖ Upgraded: {{folder_path}}")
        return True
        
    except Exception as e:
        print(f"‚ùå Error upgrading {{folder_path}}: {{e}}")
        return False


def main():
    """Main function ƒë·ªÉ n√¢ng c·∫•p to√†n b·ªô h·ªá th·ªëng"""
    print("üöÄ B·∫Øt ƒë·∫ßu n√¢ng c·∫•p to√†n di·ªán h·ªá th·ªëng t√†i li·ªáu AI/ML...")
    
    # L·∫•y t·∫•t c·∫£ th∆∞ m·ª•c con
    subdirs = []
    for root, dirs, files in os.walk('.'):
        if root == '.' or any(part.startswith('.') or part == '__pycache__' for part in Path(root).parts):
            continue
        subdirs.append((root, Path(root).name.replace('_', ' ').title()))
    
    # N√¢ng c·∫•p t·ª´ng th∆∞ m·ª•c
    upgraded_count = 0
    for folder_path, topic in subdirs:
        if upgrade_folder_content(folder_path, topic):
            upgraded_count += 1
    
    print(f"\nüéâ Ho√†n th√†nh n√¢ng c·∫•p! ƒê√£ n√¢ng c·∫•p {upgraded_count} th∆∞ m·ª•c")
    print("üìù M·ªói th∆∞ m·ª•c gi·ªù c√≥:")
    print("   - THEORY_<topic>.md: L√Ω thuy·∫øt chi ti·∫øt (song ng·ªØ)")
    print("   - QUIZ_<topic>.md: B√†i ki·ªÉm tra ki·∫øn th·ª©c")
    print("   - PROJECT_<topic>.md: D·ª± √°n th·ª±c h√†nh")
    print("   - ROADMAP_<topic>.md: L·ªô tr√¨nh h·ªçc t·∫≠p")
    print("   - CODE_EXAMPLES_<topic>.md: V√≠ d·ª• code")
    print("   - BEST_PRACTICES_<topic>.md: Best practices")
    print("   - requirements_<topic>.txt: Dependencies")
    print("   - COMPLEX_PROBLEMS.md: 5 b√†i to√°n ph·ª©c t·∫°p")


if __name__ == "__main__":
    main() 